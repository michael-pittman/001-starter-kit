# Enhanced EFS Integration Configuration for AI Starter Kit
# Optimized for high-performance AI workloads on g4dn.xlarge instances
# Features: Performance optimization, intelligent tiering, backup strategies, security

# =============================================================================
# EFS FILE SYSTEM CONFIGURATION
# =============================================================================
EFSFileSystem:
  CreationToken: "ai-starter-kit-gpu-enhanced-efs"
  PerformanceMode: "generalPurpose"    # Better for most AI workloads
  ThroughputMode: "provisioned"        # Guaranteed performance
  ProvisionedThroughputInMibps: 500    # 500 MiB/s for AI workloads
  
  # Intelligent Tiering for cost optimization
  LifecycleConfiguration:
    TransitionToIA: "AFTER_30_DAYS"     # Move to Infrequent Access after 30 days
    TransitionToPrimaryStorageClass: "AFTER_1_ACCESS"  # Move back on access
    TransitionToArchive: "AFTER_90_DAYS"  # Archive rarely accessed data

  # Encryption and Security
  Encrypted: true
  KmsKeyId: "alias/aws/elasticfilesystem"
  
  # Performance optimization tags
  Tags:
    - Key: "Name"
      Value: "ai-starter-kit-gpu-efs-enhanced"
    - Key: "Environment"
      Value: "production"
    - Key: "Workload"
      Value: "ai-ml-gpu"
    - Key: "PerformanceMode"
      Value: "high-throughput"
    - Key: "CostOptimization"
      Value: "intelligent-tiering"
    - Key: "BackupStrategy"
      Value: "automated-daily"

# =============================================================================
# MOUNT TARGETS WITH MULTI-AZ SUPPORT
# =============================================================================
MountTargets:
  # Primary mount target (us-east-1a)
  - SubnetId: "subnet-xxxxxxxxx"
    SecurityGroups: 
      - "sg-efs-performance-optimized"
    IpAddress: "172.20.1.100"  # Static IP for consistency
  
  # Secondary mount target (us-east-1b)  
  - SubnetId: "subnet-yyyyyyyyy"
    SecurityGroups:
      - "sg-efs-performance-optimized"
    IpAddress: "172.20.2.100"
    
  # Tertiary mount target (us-east-1c)
  - SubnetId: "subnet-zzzzzzzzz"
    SecurityGroups:
      - "sg-efs-performance-optimized"
    IpAddress: "172.20.3.100"

# =============================================================================
# ENHANCED SECURITY GROUP FOR EFS
# =============================================================================
SecurityGroup:
  GroupName: "efs-performance-optimized"
  GroupDescription: "Enhanced security group for EFS with performance optimizations"
  VpcId: "vpc-xxxxxxxxx"
  
  SecurityGroupRules:
    Ingress:
      # NFS access from AI instances
      - IpProtocol: "tcp"
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: "sg-gpu-optimized-ai-starter-kit"
        Description: "NFS access from GPU instances"
      
      # NFS access from management instances
      - IpProtocol: "tcp"
        FromPort: 2049
        ToPort: 2049
        CidrIp: "172.20.0.0/16"
        Description: "NFS access from VPC"
        
      # EFS utils communication
      - IpProtocol: "tcp"
        FromPort: 20049
        ToPort: 20049
        SourceSecurityGroupId: "sg-gpu-optimized-ai-starter-kit"
        Description: "EFS utils stunnel communication"
    
    Egress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
        Description: "All outbound traffic"

# =============================================================================
# ACCESS POINTS FOR SERVICE ISOLATION
# =============================================================================
AccessPoints:
  # n8n data access point
  - Name: "n8n-data-ap"
    FileSystemId: "${EFS_FILE_SYSTEM_ID}"
    PosixUser:
      Uid: 1000
      Gid: 1000
    RootDirectory:
      Path: "/n8n"
      CreationInfo:
        OwnerUid: 1000
        OwnerGid: 1000
        Permissions: "755"
    Tags:
      - Key: "Service"
        Value: "n8n"
      - Key: "DataType"
        Value: "workflows"
  
  # PostgreSQL data access point
  - Name: "postgres-data-ap"
    FileSystemId: "${EFS_FILE_SYSTEM_ID}"
    PosixUser:
      Uid: 999
      Gid: 999
    RootDirectory:
      Path: "/postgres"
      CreationInfo:
        OwnerUid: 999
        OwnerGid: 999
        Permissions: "700"
    Tags:
      - Key: "Service"
        Value: "postgres"
      - Key: "DataType"
        Value: "database"
  
  # Ollama models access point
  - Name: "ollama-models-ap"
    FileSystemId: "${EFS_FILE_SYSTEM_ID}"
    PosixUser:
      Uid: 0
      Gid: 0
    RootDirectory:
      Path: "/ollama"
      CreationInfo:
        OwnerUid: 0
        OwnerGid: 0
        Permissions: "755"
    Tags:
      - Key: "Service"
        Value: "ollama"
      - Key: "DataType"
        Value: "ai-models"
  
  # Qdrant data access point
  - Name: "qdrant-data-ap"
    FileSystemId: "${EFS_FILE_SYSTEM_ID}"
    PosixUser:
      Uid: 0
      Gid: 0
    RootDirectory:
      Path: "/qdrant"
      CreationInfo:
        OwnerUid: 0
        OwnerGid: 0
        Permissions: "755"
    Tags:
      - Key: "Service"
        Value: "qdrant"
        DataType: "vector-database"
  
  # Shared storage access point
  - Name: "shared-storage-ap"
    FileSystemId: "${EFS_FILE_SYSTEM_ID}"
    PosixUser:
      Uid: 1000
      Gid: 1000
    RootDirectory:
      Path: "/shared"
      CreationInfo:
        OwnerUid: 1000
        OwnerGid: 1000
        Permissions: "755"
    Tags:
      - Key: "Service"
        Value: "shared"
      - Key: "DataType"
        Value: "common"

# =============================================================================
# BACKUP POLICY WITH INTELLIGENT SCHEDULING
# =============================================================================
BackupPolicy:
  PolicyName: "ai-starter-kit-efs-backup-policy"
  BackupPlan:
    BackupPlanName: "ai-starter-kit-efs-backup-plan"
    BackupPlanRule:
      # Daily backups
      - RuleName: "daily-backup-rule"
        TargetBackupVault: "ai-starter-kit-backup-vault"
        ScheduleExpression: "cron(0 3 * * ? *)"  # 3 AM daily
        Lifecycle:
          DeleteAfterDays: 35
          MoveToColdStorageAfterDays: 7
        RecoveryPointTags:
          - Key: "Frequency"
            Value: "daily"
          - Key: "Environment"
            Value: "production"
        CopyActions: []
      
      # Weekly backups with longer retention
      - RuleName: "weekly-backup-rule"
        TargetBackupVault: "ai-starter-kit-backup-vault"
        ScheduleExpression: "cron(0 4 ? * SUN *)"  # 4 AM every Sunday
        Lifecycle:
          DeleteAfterDays: 120
          MoveToColdStorageAfterDays: 30
        RecoveryPointTags:
          - Key: "Frequency"
            Value: "weekly"
          - Key: "Retention"
            Value: "extended"

  # Backup vault configuration
  BackupVault:
    BackupVaultName: "ai-starter-kit-backup-vault"
    EncryptionKeyArn: "alias/aws/backup"
    BackupVaultTags:
      - Key: "Purpose"
        Value: "efs-backup"
      - Key: "CostOptimization"
        Value: "lifecycle-managed"

# =============================================================================
# PERFORMANCE OPTIMIZATION CONFIGURATION
# =============================================================================
PerformanceOptimization:
  MountOptions:
    # High-performance mount options for AI workloads
    NFSv4:
      - "nfsvers=4.1"
      - "rsize=1048576"      # 1MB read size
      - "wsize=1048576"      # 1MB write size
      - "hard"               # Hard mount for reliability
      - "intr"               # Interruptible for graceful shutdown
      - "timeo=600"          # 60 second timeout
      - "retrans=2"          # 2 retransmissions
      - "_netdev"            # Network device
      - "fsc"                # Enable local caching
      - "regional"           # Regional mount helper
    
    # EFS Utils optimized mount
    EFSUtils:
      - "tls"                # TLS encryption in transit
      - "iam"                # IAM authorization
      - "rsize=1048576"
      - "wsize=1048576"
      - "hard"
      - "intr"
      - "cache=rw"           # Read-write caching

  # Client-side optimizations
  ClientOptimizations:
    MaxConcurrentConnections: 16
    MaxRequestSize: 1048576
    CacheSize: "256MB"
    AttributeCacheTimeout: 600
    DataCacheTimeout: 600

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================
Monitoring:
  CloudWatchMetrics:
    - MetricName: "TotalIOBytes"
      Namespace: "AWS/EFS"
      Dimensions:
        - Name: "FileSystemId"
          Value: "${EFS_FILE_SYSTEM_ID}"
    
    - MetricName: "ClientConnections"
      Namespace: "AWS/EFS"
      Dimensions:
        - Name: "FileSystemId"
          Value: "${EFS_FILE_SYSTEM_ID}"
    
    - MetricName: "PercentIOLimit"
      Namespace: "AWS/EFS"
      Dimensions:
        - Name: "FileSystemId"
          Value: "${EFS_FILE_SYSTEM_ID}"

  CloudWatchAlarms:
    # High throughput utilization alarm
    - AlarmName: "efs-high-throughput-utilization"
      AlarmDescription: "EFS throughput utilization is high"
      MetricName: "PercentIOLimit"
      Namespace: "AWS/EFS"
      Statistic: "Average"
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:ACCOUNT_ID:efs-alerts"
    
    # Low client connections alarm (potential issue)
    - AlarmName: "efs-no-client-connections"
      AlarmDescription: "No EFS client connections detected"
      MetricName: "ClientConnections"
      Namespace: "AWS/EFS"
      Statistic: "Average"
      Period: 600
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: "LessThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:ACCOUNT_ID:efs-alerts"

# =============================================================================
# COST OPTIMIZATION STRATEGIES
# =============================================================================
CostOptimization:
  IntelligentTiering:
    Enabled: true
    TransitionToIA: "AFTER_30_DAYS"
    TransitionToArchive: "AFTER_90_DAYS"
    
  ThroughputOptimization:
    Mode: "provisioned"
    ProvisionedThroughput: 500  # MiB/s
    AutoScaling:
      Enabled: true
      MinThroughput: 100
      MaxThroughput: 1000
      ScaleUpThreshold: 80    # Percent utilization
      ScaleDownThreshold: 20  # Percent utilization

  StorageOptimization:
    CleanupPolicies:
      - Type: "temporary_files"
        Pattern: "/tmp/*"
        RetentionDays: 1
      - Type: "log_files"
        Pattern: "*.log"
        CompressDays: 7
        DeleteDays: 30
      - Type: "cache_files"
        Pattern: "*/cache/*"
        RetentionDays: 7

# =============================================================================
# TERRAFORM INFRASTRUCTURE CODE
# =============================================================================
TerraformConfig: |
  # Enhanced EFS Infrastructure for AI Starter Kit
  
  resource "aws_efs_file_system" "ai_starter_kit" {
    creation_token   = "ai-starter-kit-gpu-enhanced-efs"
    performance_mode = "generalPurpose"
    throughput_mode  = "provisioned"
    provisioned_throughput_in_mibps = 500
    encrypted = true
    kms_key_id = data.aws_kms_key.efs.arn
    
    lifecycle_policy {
      transition_to_ia                    = "AFTER_30_DAYS"
      transition_to_primary_storage_class = "AFTER_1_ACCESS"
      transition_to_archive              = "AFTER_90_DAYS"
    }
    
    tags = {
      Name = "ai-starter-kit-gpu-efs-enhanced"
      Environment = "production"
      Workload = "ai-ml-gpu"
      PerformanceMode = "high-throughput"
      CostOptimization = "intelligent-tiering"
    }
  }
  
  resource "aws_efs_mount_target" "ai_starter_kit" {
    count           = length(var.subnet_ids)
    file_system_id  = aws_efs_file_system.ai_starter_kit.id
    subnet_id       = var.subnet_ids[count.index]
    security_groups = [aws_security_group.efs.id]
  }
  
  resource "aws_security_group" "efs" {
    name_prefix = "efs-ai-starter-kit-"
    vpc_id      = var.vpc_id
    
    ingress {
      from_port       = 2049
      to_port         = 2049
      protocol        = "tcp"
      security_groups = [var.ec2_security_group_id]
      description     = "NFS access from EC2 instances"
    }
    
    egress {
      from_port   = 0
      to_port     = 0
      protocol    = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
    
    tags = {
      Name = "efs-ai-starter-kit-sg"
    }
  }
  
  # Access points for each service
  resource "aws_efs_access_point" "n8n" {
    file_system_id = aws_efs_file_system.ai_starter_kit.id
    
    posix_user {
      gid = 1000
      uid = 1000
    }
    
    root_directory {
      path = "/n8n"
      creation_info {
        owner_gid   = 1000
        owner_uid   = 1000
        permissions = "755"
      }
    }
    
    tags = {
      Name = "n8n-access-point"
      Service = "n8n"
    }
  }
  
  resource "aws_efs_access_point" "postgres" {
    file_system_id = aws_efs_file_system.ai_starter_kit.id
    
    posix_user {
      gid = 999
      uid = 999
    }
    
    root_directory {
      path = "/postgres"
      creation_info {
        owner_gid   = 999
        owner_uid   = 999
        permissions = "700"
      }
    }
    
    tags = {
      Name = "postgres-access-point"
      Service = "postgres"
    }
  }
  
  resource "aws_efs_access_point" "ollama" {
    file_system_id = aws_efs_file_system.ai_starter_kit.id
    
    posix_user {
      gid = 0
      uid = 0
    }
    
    root_directory {
      path = "/ollama"
      creation_info {
        owner_gid   = 0
        owner_uid   = 0
        permissions = "755"
      }
    }
    
    tags = {
      Name = "ollama-access-point"
      Service = "ollama"
    }
  }
  
  resource "aws_efs_access_point" "qdrant" {
    file_system_id = aws_efs_file_system.ai_starter_kit.id
    
    posix_user {
      gid = 0
      uid = 0
    }
    
    root_directory {
      path = "/qdrant"
      creation_info {
        owner_gid   = 0
        owner_uid   = 0
        permissions = "755"
      }
    }
    
    tags = {
      Name = "qdrant-access-point"
      Service = "qdrant"
    }
  }
  
  # Backup policy
  resource "aws_backup_plan" "efs" {
    name = "ai-starter-kit-efs-backup"
    
    rule {
      rule_name         = "daily_backup"
      target_vault_name = aws_backup_vault.main.name
      schedule          = "cron(0 3 * * ? *)"
      
      lifecycle {
        delete_after       = 35
        cold_storage_after = 7
      }
      
      recovery_point_tags = {
        Frequency = "daily"
      }
    }
    
    rule {
      rule_name         = "weekly_backup"
      target_vault_name = aws_backup_vault.main.name
      schedule          = "cron(0 4 ? * SUN *)"
      
      lifecycle {
        delete_after       = 120
        cold_storage_after = 30
      }
      
      recovery_point_tags = {
        Frequency = "weekly"
      }
    }
  }
  
  resource "aws_backup_vault" "main" {
    name        = "ai-starter-kit-backup-vault"
    kms_key_arn = data.aws_kms_key.backup.arn
  }
  
  # CloudWatch alarms
  resource "aws_cloudwatch_metric_alarm" "efs_high_io" {
    alarm_name          = "efs-high-io-utilization"
    comparison_operator = "GreaterThanThreshold"
    evaluation_periods  = "2"
    metric_name         = "PercentIOLimit"
    namespace           = "AWS/EFS"
    period              = "300"
    statistic           = "Average"
    threshold           = "80"
    alarm_description   = "This metric monitors EFS IO utilization"
    alarm_actions       = [aws_sns_topic.alerts.arn]
    
    dimensions = {
      FileSystemId = aws_efs_file_system.ai_starter_kit.id
    }
  }
  
  # Outputs
  output "efs_file_system_id" {
    value = aws_efs_file_system.ai_starter_kit.id
  }
  
  output "efs_dns_name" {
    value = aws_efs_file_system.ai_starter_kit.dns_name
  }
  
  output "efs_access_points" {
    value = {
      n8n      = aws_efs_access_point.n8n.id
      postgres = aws_efs_access_point.postgres.id
      ollama   = aws_efs_access_point.ollama.id
      qdrant   = aws_efs_access_point.qdrant.id
    }
  }

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================
DeploymentInstructions:
  Prerequisites:
    - "VPC with at least 3 subnets across different AZs"
    - "Existing security group for EC2 instances"
    - "KMS keys for EFS and Backup encryption"
    - "SNS topic for alerts"
  
  Steps:
    1. "Deploy EFS file system with Terraform or CloudFormation"
    2. "Create mount targets in each availability zone"
    3. "Configure security groups for NFS access"
    4. "Set up access points for service isolation"
    5. "Configure backup policies"
    6. "Set up CloudWatch monitoring and alerts"
    7. "Test mount performance from EC2 instances"
  
  PerformanceValidation:
    - "Test throughput: dd if=/dev/zero of=/mnt/efs/test bs=1M count=1000"
    - "Test IOPS: fio --name=test --ioengine=libaio --rw=randwrite --bs=4k --size=1G --numjobs=8 --runtime=60 --group_reporting --filename=/mnt/efs/test"
    - "Monitor CloudWatch metrics for 24 hours"
  
  TroubleshootingGuide:
    - "Check mount.efs logs: /var/log/amazon/efs/mount.log"
    - "Verify security group allows NFS (port 2049)"
    - "Test connectivity: telnet <efs-id>.efs.<region>.amazonaws.com 2049"
    - "Check IAM permissions for EFS access" 