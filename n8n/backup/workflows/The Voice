{
  "name": "The Voice Workflow",
  "nodes": [
    {
      "id": 1,
      "name": "The Voice Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [ -300, 0 ],
      "parameters": {
        "path": "a2a/voice",
        "httpMethod": "POST",
        "responseMode": "onReceived"
      }
    },
    {
      "id": 2,
      "name": "Parse Message & Load State",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [ -300, 150 ],
      "parameters": {
        "functionCode": "// Parse incoming A2A message and load or initialize task state\nconst data = this.getWorkflowStaticData('global');\nconst incoming = items[0].json;\nconst taskId = incoming.task_id;\nif (!data.tasks) {\n  data.tasks = {};\n}\nif (!data.tasks[taskId]) {\n  // Initialize new task state\n  data.tasks[taskId] = {\n    status: 'working',\n    createdAt: new Date().toISOString()\n  };\n}\n// Ensure artifacts field exists\nif (incoming.artifacts === undefined) {\n  incoming.artifacts = [];\n}\n// Attach current task status\nincoming.task_status = data.tasks[taskId].status;\nreturn items;\n"
      }
    },
    {
      "id": 3,
      "name": "Process Task",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [ -300, 300 ],
      "parameters": {
        "functionCode": "// Internal agent logic placeholder\nconst data = this.getWorkflowStaticData('global');\nconst taskId = item.json.task_id;\nconst sender = item.json.sender;\nlet nextAgent = '';\n// Determine next action (forward or respond).\n// Example: If message contains a delegation directive \"-> Agent\", parse it\nif (item.json.message && item.json.message.includes('->')) {\n  const match = item.json.message.match(/->\\s*(\\w+)/);\n  if (match) {\n    nextAgent = match[1].toLowerCase();\n    // Remove delegation directive from message\n    item.json.message = item.json.message.replace(match[0], '').trim();\n  }\n}\n// Finalize if no next agent\nif (!nextAgent) {\n  if (data.tasks[taskId]) {\n    data.tasks[taskId].status = 'completed';\n    data.tasks[taskId].completedAt = new Date().toISOString();\n  }\n  // Add result artifact (example output)\n  item.json.artifacts = item.json.artifacts || [];\n  item.json.artifacts.push({\n    summary: `Result generated by The Voice`,\n    timestamp: new Date().toISOString()\n  });\n} else {\n  if (data.tasks[taskId]) {\n    data.tasks[taskId].status = 'working';\n  }\n}\n// Pass next agent\nitem.json.nextAgent = nextAgent;\nreturn item;\n"
      }
    },
    {
      "id": 4,
      "name": "Route: Forward or Respond",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [ -300, 450 ],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json[\"nextAgent\"].length }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      }
    },
    {
      "id": 5,
      "name": "HTTP Request - Forward",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [ 100, 450 ],
      "parameters": {
        "url": "={{ \"http://localhost:5678/webhook/a2a/\" + $json[\"nextAgent\"] }}",
        "method": "POST",
        "jsonParameters": true,
        "options": { "fullResponse": true },
        "bodyParametersJson": "={ { \"task_id\": $node[\"Process Task\"].json[\"task_id\"], \"sender\": \"The Voice\", \"message\": $node[\"Process Task\"].json[\"message\"], \"artifacts\": $node[\"Process Task\"].json[\"artifacts\"] } }"
      },
      "continueOnFail": true
    },
    {
      "id": 6,
      "name": "Check Forward Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [ 100, 600 ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json[\"error\"] !== undefined || $json[\"statusCode\"] >= 400 }}",
              "operation": "true"
            }
          ]
        }
      }
    },
    {
      "id": 7,
      "name": "HTTP Request - Retry Forward",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [ 100, 750 ],
      "parameters": {
        "url": "={{ \"http://localhost:5678/webhook/a2a/\" + $json[\"nextAgent\"] }}",
        "method": "POST",
        "jsonParameters": true,
        "options": { "fullResponse": true },
        "bodyParametersJson": "={ { \"task_id\": $node[\"Process Task\"].json[\"task_id\"], \"sender\": \"The Voice\", \"message\": $node[\"Process Task\"].json[\"message\"], \"artifacts\": $node[\"Process Task\"].json[\"artifacts\"] } }"
      },
      "continueOnFail": true
    },
    {
      "id": 8,
      "name": "HTTP Request - Respond",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [ -700, 450 ],
      "parameters": {
        "url": "={{ \"http://localhost:5678/webhook/a2a/\" + $json[\"sender\"].toLowerCase() }}",
        "method": "POST",
        "jsonParameters": true,
        "options": { "fullResponse": true },
        "bodyParametersJson": "={ { \"task_id\": $node[\"Process Task\"].json[\"task_id\"], \"sender\": \"The Voice\", \"message\": $node[\"Process Task\"].json[\"message\"], \"artifacts\": $node[\"Process Task\"].json[\"artifacts\"] } }"
      },
      "continueOnFail": true
    },
    {
      "id": 9,
      "name": "Check Respond Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [ -700, 600 ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json[\"error\"] !== undefined || $json[\"statusCode\"] >= 400 }}",
              "operation": "true"
            }
          ]
        }
      }
    },
    {
      "id": 10,
      "name": "HTTP Request - Retry Respond",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [ -700, 750 ],
      "parameters": {
        "url": "={{ \"http://localhost:5678/webhook/a2a/\" + $json[\"sender\"].toLowerCase() }}",
        "method": "POST",
        "jsonParameters": true,
        "options": { "fullResponse": true },
        "bodyParametersJson": "={ { \"task_id\": $node[\"Process Task\"].json[\"task_id\"], \"sender\": \"The Voice\", \"message\": $node[\"Process Task\"].json[\"message\"], \"artifacts\": $node[\"Process Task\"].json[\"artifacts\"] } }"
      },
      "continueOnFail": true
    }
  ],
  "connections": {
    "The Voice Webhook": {
      "main": [[ { "node": "Parse Message & Load State", "type": "main", "index": 0 } ]]
    },
    "Parse Message & Load State": {
      "main": [[ { "node": "Process Task", "type": "main", "index": 0 } ]]
    },
    "Process Task": {
      "main": [[ { "node": "Route: Forward or Respond", "type": "main", "index": 0 } ]]
    },
    "Route: Forward or Respond": {
      "main": [
        [ { "node": "HTTP Request - Forward", "type": "main", "index": 0 } ],
        [ { "node": "HTTP Request - Respond", "type": "main", "index": 0 } ]
      ]
    },
    "HTTP Request - Forward": {
      "main": [[ { "node": "Check Forward Error", "type": "main", "index": 0 } ]]
    },
    "Check Forward Error": {
      "main": [
        [ { "node": "HTTP Request - Retry Forward", "type": "main", "index": 0 } ],
        []
      ]
    },
    "HTTP Request - Respond": {
      "main": [[ { "node": "Check Respond Error", "type": "main", "index": 0 } ]]
    },
    "Check Respond Error": {
      "main": [
        [ { "node": "HTTP Request - Retry Respond", "type": "main", "index": 0 } ],
        []
      ]
    }
  },
  "active": false
}
