version: '3.8'

volumes:
  n8n_storage:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${EFS_DNS},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
      device: ":/n8n"
  postgres_storage:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${EFS_DNS},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
      device: ":/postgres"
  ollama_storage:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${EFS_DNS},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
      device: ":/ollama"
  qdrant_storage:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${EFS_DNS},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
      device: ":/qdrant"
  crawl4ai_storage:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${EFS_DNS},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
      device: ":/crawl4ai"

networks:
  demo:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    x-aws-vpc:
      subnets:
        - "subnet-00dd2e4d"
      security_groups:
        - "sg-6da25332"

x-n8n: &service-n8n
<<<<<<< HEAD
  build:
    context: .
    dockerfile: Dockerfile.n8n
    cache_from:
      - n8nio/n8n:latest
    args:
      BUILDKIT_INLINE_CACHE: 1
=======
  image: n8nio/n8n:latest
  pull_policy: always
>>>>>>> cef86fbd0accf87199bfceabf9bb74ca3bc144f9
  networks:
    - demo
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - OLLAMA_HOST=ollama:11434
    - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
    - N8N_HOST=n8n.geuse.io
    - N8N_PROTOCOL=https
    - WEBHOOK_URL=https://n8n.geuse.io/
    - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    - N8N_CORS_ENABLE=true
    - N8N_CORS_ALLOWED_ORIGINS=https://www.geuse.io
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '1.0'
      reservations:
        memory: 512M
        cpus: '0.5'
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      cache_from:
        - postgres:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    hostname: postgres
    networks:
      - demo
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements", "-c", "max_connections=100"]

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command: ["-c", "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"]
    volumes:
      - ./n8n/backup:/backup:ro
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup:ro
      - ./shared:/data/shared
      - ./n8n/certs:/files/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  qdrant:
    build:
      context: .
      dockerfile: Dockerfile.qdrant
      cache_from:
        - qdrant/qdrant:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    hostname: qdrant
    container_name: qdrant
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  crawl4ai:
    build:
      context: .
      dockerfile: Dockerfile.crawl4ai
      cache_from:
        - unclecode/crawl4ai:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    hostname: crawl4ai
    container_name: crawl4ai
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "11235:11235"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11235/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
      cache_from:
        - ollama/ollama:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    hostname: ollama
    container_name: ollama
    networks:
      - demo
    restart: always
    ports:
      - "11434:11434"
    volumes:
      - ollama_storage:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    devices:
      - "/dev/dri:/dev/dri"
      - "/dev/kfd:/dev/kfd"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*

  ollama-init:
    build:
      context: .
      dockerfile: Dockerfile.ollama
      cache_from:
        - ollama/ollama:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    networks:
      - demo
    container_name: ollama-pull-llama
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        /bin/ollama serve &
        sleep 10
        ollama pull mxbai-embed-large:latest || true
        ollama pull deepseek-r1:1.5b || true
        ollama pull gemma3:latest || true
        ollama pull llama2 || true
        echo "Model initialization complete"
    environment:
      - OLLAMA_HOST=0.0.0.0
    depends_on:
      - ollama
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 2
