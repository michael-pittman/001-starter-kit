{
  "name": "Enhanced HNIC Orchestrator - Corrected",
  "nodes": [
    {
      "id": "webhook_trigger",
      "name": "Entry Point Webhook",
      "type": "nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 200],
      "parameters": {
        "path": "workforce/hnic",
        "httpMethod": "POST",
        "responseMode": "onReceived",
        "options": {}
      }
    },
    {
      "id": "load_agent_registry",
      "name": "Load Agent Registry",
      "type": "nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [300, 200],
      "parameters": {
        "resource": "database",
        "operation": "select",
        "schema": "public",
        "table": "agent_registry",
        "additionalFields": {
          "where": "status = 'active'",
          "sort": "priority ASC"
        }
      },
      "credentials": {
        "postgres": {
          "id": "postgres_main",
          "name": "PostgreSQL Main"
        }
      }
    },
    {
      "id": "check_agent_health",
      "name": "Check Agent Health",
      "type": "nodes-base.function",
      "typeVersion": 1,
      "position": [500, 200],
      "parameters": {
        "functionCode": "// MEMBER AWARENESS & RESILIENCY: Check agent health status\nconst agents = items[0].json;\nconst healthyAgents = [];\nconst degradedAgents = [];\n\nfor (const agent of agents) {\n  const lastHeartbeat = new Date(agent.last_heartbeat);\n  const now = new Date();\n  const timeDiff = now - lastHeartbeat;\n  \n  if (timeDiff < 60000) { // 1 minute threshold\n    healthyAgents.push(agent);\n  } else if (timeDiff < 300000) { // 5 minute threshold\n    degradedAgents.push(agent);\n  }\n}\n\nreturn [{\n  json: {\n    healthy_agents: healthyAgents,\n    degraded_agents: degradedAgents,\n    total_capacity: healthyAgents.reduce((sum, agent) => sum + agent.max_capacity, 0)\n  }\n}];"
      }
    },
    {
      "id": "analyze_request",
      "name": "Analyze Request & Plan",
      "type": "nodes-langchain.agent",
      "typeVersion": 2,
      "position": [700, 200],
      "parameters": {
        "promptType": "define",
        "text": "You are the HNIC (Head Nerd In Charge) with supreme authority over the AI agent workforce. Your role is to analyze requests and create strategic execution plans.\n\nAVAILABLE AGENTS:\n={{$json.healthy_agents}}\n\nDEGRADED AGENTS:\n={{$json.degraded_agents}}\n\nTOTAL CAPACITY:\n={{$json.total_capacity}}\n\nAnalyze the incoming request and create a detailed execution plan that:\n1. Breaks down the request into atomic tasks\n2. Assigns tasks to appropriate agents based on their capabilities\n3. Establishes task dependencies and execution order\n4. Accounts for agent capacity and health status\n5. Includes fallback strategies for potential agent failures\n\nReturn your analysis as JSON format with execution plan and task details.",
        "hasOutputParser": true
      }
    },
    {
      "id": "openai_model",
      "name": "OpenAI GPT-4",
      "type": "nodes-langchain.lmChatOpenAi",
      "typeVersion": 2,
      "position": [700, 350],
      "parameters": {
        "model": "gpt-4",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.3
        }
      },
      "credentials": {
        "openAiApi": {
          "id": "openai_main",
          "name": "OpenAI Main"
        }
      }
    },
    {
      "id": "postgres_memory",
      "name": "Postgres Memory",
      "type": "nodes-langchain.memoryPostgresChat",
      "typeVersion": 2,
      "position": [700, 500],
      "parameters": {
        "sessionId": "={{$workflow.id}}-{{$execution.id}}",
        "options": {
          "memoryKey": "chat_history",
          "contextWindow": 10
        }
      },
      "credentials": {
        "postgres": {
          "id": "postgres_main",
          "name": "PostgreSQL Main"
        }
      }
    },
    {
      "id": "create_task_queue",
      "name": "Create Task Queue",
      "type": "nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200],
      "parameters": {
        "functionCode": "// MEMBER SOLIDARITY: Create coordinated task queue\nconst plan = JSON.parse(items[0].json.text || items[0].json.response);\nconst taskQueue = [];\nconst workflowId = $workflow.id;\nconst executionId = $execution.id;\n\nfor (const phase of plan.execution_plan.phases) {\n  for (const task of phase.tasks) {\n    taskQueue.push({\n      task_id: task.task_id,\n      workflow_id: workflowId,\n      execution_id: executionId,\n      agent: task.agent,\n      action: task.action,\n      priority: task.priority,\n      dependencies: JSON.stringify(task.dependencies || []),\n      fallback_agent: task.fallback_agent,\n      timeout: task.timeout,\n      status: 'pending',\n      created_at: new Date().toISOString(),\n      retry_count: 0\n    });\n  }\n}\n\nreturn taskQueue.map(task => ({json: task}));"
      }
    },
    {
      "id": "store_tasks",
      "name": "Store Tasks in Queue",
      "type": "nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1100, 200],
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "schema": "public",
        "table": "task_queue",
        "columns": "task_id, workflow_id, execution_id, agent, action, priority, dependencies, fallback_agent, timeout, status, created_at, retry_count",
        "additionalFields": {}
      },
      "credentials": {
        "postgres": {
          "id": "postgres_main",
          "name": "PostgreSQL Main"
        }
      }
    },
    {
      "id": "route_to_agent",
      "name": "Route to Agent",
      "type": "nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1300, 200],
      "parameters": {
        "mode": "expression",
        "numberOutputs": 6,
        "output": "={{$json.agent === 'ear' ? 0 : $json.agent === 'archivist' ? 1 : $json.agent === 'voice' ? 2 : $json.agent === 'bag' ? 3 : $json.agent === 'pen' ? 4 : 5}}"
      }
    },
    {
      "id": "call_ear",
      "name": "Call The Ear",
      "type": "nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1500, 50],
      "parameters": {
        "method": "POST",
        "url": "http://n8n.geuse.io/webhook/a2a/ear",
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"task_id\": \"{{$json.task_id}}\",\n  \"sender\": \"hnic\",\n  \"action\": \"{{$json.action}}\",\n  \"priority\": \"{{$json.priority}}\",\n  \"context\": {{$node[\"Entry Point Webhook\"].json}},\n  \"workflow_id\": \"{{$json.workflow_id}}\",\n  \"execution_id\": \"{{$json.execution_id}}\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "continueOnFail": true
    },
    {
      "id": "call_archivist",
      "name": "Call The Archivist",
      "type": "nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1500, 150],
      "parameters": {
        "method": "POST",
        "url": "http://n8n.geuse.io/webhook/a2a/archivist",
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"task_id\": \"{{$json.task_id}}\",\n  \"sender\": \"hnic\",\n  \"action\": \"{{$json.action}}\",\n  \"priority\": \"{{$json.priority}}\",\n  \"context\": {{$node[\"Entry Point Webhook\"].json}},\n  \"workflow_id\": \"{{$json.workflow_id}}\",\n  \"execution_id\": \"{{$json.execution_id}}\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "continueOnFail": true
    }
  ],
  "connections": {
    "Entry Point Webhook": {
      "main": [
        [
          {
            "node": "Load Agent Registry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Agent Registry": {
      "main": [
        [
          {
            "node": "Check Agent Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Agent Health": {
      "main": [
        [
          {
            "node": "Analyze Request & Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Request & Plan": {
      "main": [
        [
          {
            "node": "Create Task Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4": {
      "ai_languageModel": [
        [
          {
            "node": "Analyze Request & Plan",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Memory": {
      "ai_memory": [
        [
          {
            "node": "Analyze Request & Plan",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Create Task Queue": {
      "main": [
        [
          {
            "node": "Store Tasks in Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Tasks in Queue": {
      "main": [
        [
          {
            "node": "Route to Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Agent": {
      "main": [
        [
          {
            "node": "Call The Ear",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call The Archivist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": ["agentic-workforce", "hnic", "orchestrator"]
} 