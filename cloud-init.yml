#cloud-config
package_update: true
package_upgrade: true
runcmd:
  # 1. Install required packages (including awscli for SSM fetch)
  - 'yum install -y amazon-efs-utils nfs-utils docker git awscli'
  - 'curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose'
  - 'chmod +x /usr/local/bin/docker-compose'
  - 'systemctl enable docker && systemctl start docker'
  - 'usermod -aG docker ec2-user'
  
  # 2. Install NVIDIA driver and container toolkit (if needed for GPU workloads)
  - 'yum install -y nvidia-driver-latest-dkms nvidia-container-toolkit'
  - 'nvidia-container-cli info || true'
  - 'systemctl restart docker'
  
  # 3. Generate self-signed TLS certificates for n8n
  - 'mkdir -p /home/ec2-user/certs'
  - 'openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /home/ec2-user/certs/n8n-selfsigned.key -out /home/ec2-user/certs/n8n-selfsigned.crt -subj "/CN=localhost"'
  
  # 4. Fetch secrets from SSM Parameter Store
  - 'POSTGRES_PASSWORD=$(aws ssm get-parameter --name "/aibuildkit/POSTGRES_PASSWORD" --with-decryption --query "Parameter.Value" --output text)'
  - 'N8N_ENCRYPTION_KEY=$(aws ssm get-parameter --name "/aibuildkit/N8N_ENCRYPTION_KEY" --with-decryption --query "Parameter.Value" --output text)'
  - 'N8N_USER_MANAGEMENT_JWT_SECRET=$(aws ssm get-parameter --name "/aibuildkit/N8N_USER_MANAGEMENT_JWT_SECRET" --with-decryption --query "Parameter.Value" --output text)'
  
  # 5. Set up EFS variables and mount EFS temporarily to pre-create directories
  - 'file_system_id_1=fs-0bba0ecccb246a550'
  - 'efs_mount_point_1=/mnt/efs/fs1'
  - 'mkdir -p "${efs_mount_point_1}"'
  - 'test -f "/sbin/mount.efs" && echo "${file_system_id_1}:/ ${efs_mount_point_1} efs tls,_netdev 0 0" >> /etc/fstab || echo "${file_system_id_1}.efs.us-east-1.amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0" >> /etc/fstab'
  - |
    retryCnt=15; waitTime=30;
    while true; do
      mount -a -t efs,nfs4 defaults;
      if [ $? -eq 0 ] || [ $retryCnt -lt 1 ]; then
        echo "File system mounted successfully";
        break;
      fi;
      echo "File system not available, retrying to mount.";
      ((retryCnt--));
      sleep $waitTime;
    done
  - 'mkdir -p /mnt/efs/fs1/postgres_storage /mnt/efs/fs1/n8n_storage /mnt/efs/fs1/ollama_storage /mnt/efs/fs1/qdrant_storage'
   
  # 6. Clone the AI Starter Kit repository
  - 'cd /home/ec2-user && git clone https://github.com/michael-pittman/001-starter-kit.git ai-starter-kit'
  
  # 7. Write environment variables to the .env file
  - 'cd /home/ec2-user/ai-starter-kit && cp .env.example .env'
  - 'echo "POSTGRES_USER=root" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "POSTGRES_DB=n8n" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "N8N_PROTOCOL=https" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "N8N_SSL_KEY=/files/certs/n8n-selfsigned.key" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "N8N_SSL_CERT=/files/certs/n8n-selfsigned.crt" >> /home/ec2-user/ai-starter-kit/.env'
  - 'echo "EFS_DNS=${file_system_id_1}.efs.us-east-1.amazonaws.com" >> /home/ec2-user/ai-starter-kit/.env'
  
  # 7.5. Copy cert files to the expected location
  - 'mkdir -p /home/ec2-user/ai-starter-kit/n8n/certs'
  - 'cp /home/ec2-user/certs/n8n-selfsigned.* /home/ec2-user/ai-starter-kit/n8n/certs/'

  # 7.6. Verify EFS will be accessible to Docker
  - |
    # Test EFS mount accessibility
    echo "Verifying EFS mount accessibility..."
    mount "${file_system_id_1}.efs.us-east-1.amazonaws.com:/" "${efs_mount_point_1}"
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to mount EFS, Docker volumes may not work properly!"
      exit 1
    fi
    # Create test file to verify write access
    touch "${efs_mount_point_1}/efs-test-file"
    if [ $? -ne 0 ]; then
      echo "ERROR: Cannot write to EFS mount, Docker volumes may not work properly!"
      umount "${efs_mount_point_1}"
      exit 1
    else
      echo "EFS mount verified successfully"
      rm "${efs_mount_point_1}/efs-test-file"
      umount "${efs_mount_point_1}"
    fi
  
  # 8. Launch Docker Compose stack (auto-select profile based on instance type)
  - |
    cd /home/ec2-user/ai-starter-kit
    if nvidia-smi &>/dev/null; then
      echo "GPU detected - using gpu-nvidia profile"
      /usr/local/bin/docker-compose --profile gpu-nvidia up -d
    else
      echo "No GPU detected - using cpu profile"
      /usr/local/bin/docker-compose --profile cpu up -d
    fi
  
  # 9. Print success message with correct public IP
  - ["sh", "-c", "PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4); echo '==============================================='; echo \"AI Starter Kit deployment complete! Access n8n at: https://$PUBLIC_IP:5678/\"; echo '==============================================='"]
  
  # 10. Spot Instance Termination Handling
  - |
    cat <<'EOF' > /usr/local/bin/spot-termination-check.sh
    #!/bin/bash
    CHECK_INTERVAL=60
    while true; do
      TERMINATION_TIME=$(curl -s http://169.254.169.254/latest/meta-data/spot/termination-time || true)
      if [ ! -z "$TERMINATION_TIME" ]; then
        echo "Spot instance termination notice received at $TERMINATION_TIME. Initiating graceful shutdown..."
        cd /home/ec2-user/ai-starter-kit && /usr/local/bin/docker-compose down
        shutdown -h now
        exit 0
      fi
      sleep ${CHECK_INTERVAL}
    done
    EOF
  - 'chmod +x /usr/local/bin/spot-termination-check.sh'
  - 'nohup /usr/local/bin/spot-termination-check.sh >/var/log/spot-termination.log 2>&1 &'
