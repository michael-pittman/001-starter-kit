# Enhanced AWS Spot Instance Configuration for GPU-Optimized AI Starter Kit
# Advanced cost optimization strategies for g4dn.xlarge instances with up to 70% savings
# Includes automated scaling, monitoring, and intelligent fallback strategies

# =============================================================================
# SPOT FLEET CONFIGURATION WITH DIVERSIFICATION STRATEGY
# =============================================================================
SpotFleetConfig:
  Name: "ai-starter-kit-gpu-spot-fleet-enhanced"
  IamFleetRole: "arn:aws:iam::ACCOUNT_ID:role/aws-ec2-spot-fleet-tagging-role"
  AllocationStrategy: "diversified"  # Spread across instance types and AZs
  TargetCapacity: 2  # Start with 2 instances for redundancy
  ReplaceUnhealthyInstances: true
  Type: "maintain"
  TerminateInstancesWithExpiration: true
  ExcessCapacityTerminationPolicy: "default"
  
  # Enhanced instance type diversification for better spot availability
  LaunchTemplateConfigs:
    # Primary: g4dn.xlarge - NVIDIA T4 16GB
    - LaunchTemplateSpecification:
        LaunchTemplateName: "ai-starter-kit-gpu-optimized-g4dn"
        Version: "$Latest"
      Overrides:
        - InstanceType: "g4dn.xlarge"
          SubnetId: "subnet-xxxxxxxxx"
          AvailabilityZone: "us-east-1a"
          WeightedCapacity: 1
          SpotPrice: "0.35"  # ~70% savings vs $1.19 on-demand
          Priority: 1
        - InstanceType: "g4dn.xlarge"
          SubnetId: "subnet-yyyyyyyyy"
          AvailabilityZone: "us-east-1b"
          WeightedCapacity: 1
          SpotPrice: "0.35"
          Priority: 1
        - InstanceType: "g4dn.xlarge"
          SubnetId: "subnet-zzzzzzzzz"
          AvailabilityZone: "us-east-1c"
          WeightedCapacity: 1
          SpotPrice: "0.35"
          Priority: 1
    
    # Fallback: g4dn.2xlarge - Better availability, 2x capacity
    - LaunchTemplateSpecification:
        LaunchTemplateName: "ai-starter-kit-gpu-optimized-g4dn"
        Version: "$Latest"
      Overrides:
        - InstanceType: "g4dn.2xlarge"
          SubnetId: "subnet-aaaaaaaaa"
          AvailabilityZone: "us-east-1d"
          WeightedCapacity: 2
          SpotPrice: "0.70"  # Still ~70% savings vs $2.38 on-demand
          Priority: 2
        - InstanceType: "g4dn.2xlarge"
          SubnetId: "subnet-bbbbbbbbb"
          AvailabilityZone: "us-east-1e"
          WeightedCapacity: 2
          SpotPrice: "0.70"
          Priority: 2
    
    # Alternative: g4ad.xlarge - AMD alternative, often cheaper
    - LaunchTemplateSpecification:
        LaunchTemplateName: "ai-starter-kit-gpu-optimized-g4dn"
        Version: "$Latest"
      Overrides:
        - InstanceType: "g4ad.xlarge"
          SubnetId: "subnet-ccccccccc"
          AvailabilityZone: "us-east-1f"
          WeightedCapacity: 1
          SpotPrice: "0.30"  # Even cheaper alternative
          Priority: 3

# =============================================================================
# AUTO SCALING GROUP WITH MIXED INSTANCE POLICY
# =============================================================================
AutoScalingGroup:
  AutoScalingGroupName: "ai-starter-kit-gpu-asg-enhanced"
  MinSize: 1
  MaxSize: 10
  DesiredCapacity: 2
  DefaultCooldown: 300
  HealthCheckType: "EC2"
  HealthCheckGracePeriod: 900  # Extended for GPU initialization
  VPCZoneIdentifier:
    - "subnet-xxxxxxxxx"
    - "subnet-yyyyyyyyy"
    - "subnet-zzzzzzzzz"
    - "subnet-aaaaaaaaa"
  
  # Advanced mixed instances policy for maximum cost optimization
  MixedInstancesPolicy:
    LaunchTemplate:
      LaunchTemplateSpecification:
        LaunchTemplateName: "ai-starter-kit-gpu-optimized-g4dn"
        Version: "$Latest"
      Overrides:
        - InstanceType: "g4dn.xlarge"
          WeightedCapacity: 1
        - InstanceType: "g4dn.2xlarge"
          WeightedCapacity: 2
        - InstanceType: "g4ad.xlarge"
          WeightedCapacity: 1
        - InstanceType: "g4dn.4xlarge"
          WeightedCapacity: 4
        - InstanceType: "g5.xlarge"
          WeightedCapacity: 1
    
    InstancesDistribution:
      OnDemandAllocationStrategy: "prioritized"
      OnDemandBaseCapacity: 0  # No on-demand instances for maximum savings
      OnDemandPercentageAboveBaseCapacity: 0  # 100% Spot instances
      SpotAllocationStrategy: "capacity-optimized-prioritized"
      SpotInstancePools: 6  # Spread across multiple pools
      SpotMaxPrice: "0.75"  # Cap maximum spending
  
  # Enhanced scaling policies for AI workloads
  ScalingPolicies:
    - PolicyName: "gpu-utilization-scale-up"
      PolicyType: "TargetTrackingScaling"
      TargetTrackingScalingPolicies:
        - TargetValue: 70.0
          CustomMetricSpecification:
            MetricName: "GPUUtilization"
            Namespace: "GPU/Monitoring"
            Statistic: "Average"
          ScaleOutCooldown: 300
    
    - PolicyName: "queue-depth-scale-up"
      PolicyType: "StepScaling"
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 2

  # Enhanced tags for cost tracking and automation
  Tags:
    - Key: "Name"
      Value: "ai-starter-kit-gpu-asg-enhanced"
      PropagateAtLaunch: true
    - Key: "Environment"
      Value: "production"
      PropagateAtLaunch: true
    - Key: "CostOptimization"
      Value: "spot-instances-advanced"
      PropagateAtLaunch: true
    - Key: "AutoShutdown"
      Value: "enabled"
      PropagateAtLaunch: true
    - Key: "CostCenter"
      Value: "ai-workloads"
      PropagateAtLaunch: true
    - Key: "Application"
      Value: "ai-starter-kit"
      PropagateAtLaunch: true
    - Key: "SpotStrategy"
      Value: "diversified-gpu"
      PropagateAtLaunch: true

# =============================================================================
# CLOUDFORMATION TEMPLATE WITH ADVANCED COST OPTIMIZATION
# =============================================================================
CloudFormationTemplate: |
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'Enhanced GPU-Optimized AI Starter Kit with Advanced Spot Instance Cost Optimization'
  
  Parameters:
    KeyPairName:
      Type: AWS::EC2::KeyPair::KeyName
      Description: EC2 Key Pair for SSH access
    
    VpcId:
      Type: AWS::EC2::VPC::Id
      Description: VPC ID for deployment
    
    SubnetIds:
      Type: List<AWS::EC2::Subnet::Id>
      Description: Subnet IDs for multi-AZ deployment (minimum 3 recommended)
    
    EFSFileSystemId:
      Type: String
      Description: EFS File System ID for persistent storage
      AllowedPattern: "fs-[0-9a-f]{8,40}"
    
    MaxSpotPrice:
      Type: Number
      Default: 0.75
      Description: Maximum Spot price per hour (recommended 0.75 for g4dn.xlarge)
      MinValue: 0.10
      MaxValue: 2.00
    
    AutoShutdownHours:
      Type: Number
      Default: 12
      Description: Hours after which idle instances should be terminated
      MinValue: 1
      MaxValue: 168
    
    SlackWebhookUrl:
      Type: String
      Description: Slack webhook URL for cost alerts (optional)
      Default: ""
  
  Conditions:
    HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookUrl, ""]]
  
  Resources:
    # Enhanced Security Group with cost optimization features
    GPUSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enhanced security group for GPU AI Starter Kit with cost optimization
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
            Description: SSH access
          - IpProtocol: tcp
            FromPort: 5678
            ToPort: 5678
            CidrIp: 0.0.0.0/0
            Description: n8n web interface
          - IpProtocol: tcp
            FromPort: 11434
            ToPort: 11434
            CidrIp: 0.0.0.0/0
            Description: Ollama API
          - IpProtocol: tcp
            FromPort: 6333
            ToPort: 6333
            CidrIp: 0.0.0.0/0
            Description: Qdrant API
          - IpProtocol: tcp
            FromPort: 2049
            ToPort: 2049
            SourceSecurityGroupId: !Ref GPUSecurityGroup
            Description: EFS access
          # Monitoring and management ports
          - IpProtocol: tcp
            FromPort: 9090
            ToPort: 9090
            SourceSecurityGroupId: !Ref GPUSecurityGroup
            Description: Prometheus monitoring
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            SourceSecurityGroupId: !Ref GPUSecurityGroup
            Description: Grafana dashboard
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
            Description: All outbound traffic
        Tags:
          - Key: Name
            Value: ai-starter-kit-gpu-sg-enhanced
          - Key: CostOptimization
            Value: enabled
    
    # Enhanced IAM Role with cost management permissions
    EC2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ai-starter-kit-gpu-instance-role-enhanced
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
        Policies:
          - PolicyName: EnhancedEFSAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - elasticfilesystem:DescribeFileSystems
                    - elasticfilesystem:DescribeMountTargets
                    - elasticfilesystem:DescribeAccessPoints
                  Resource: '*'
          - PolicyName: EnhancedSSMParameterAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:GetParameters
                    - ssm:GetParametersByPath
                    - ssm:PutParameter
                  Resource: 
                    - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/aibuildkit/*'
          - PolicyName: EnhancedCloudWatchAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:PutRetentionPolicy
                    - cloudwatch:PutMetricData
                    - cloudwatch:GetMetricStatistics
                    - cloudwatch:ListMetrics
                    - cloudwatch:PutDashboard
                  Resource: '*'
          - PolicyName: SpotInstanceManagement
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeSpotInstanceRequests
                    - ec2:DescribeSpotPriceHistory
                    - ec2:DescribeInstances
                    - ec2:DescribeInstanceAttribute
                    - ec2:DescribeInstanceStatus
                    - ec2:CreateTags
                    - autoscaling:DescribeAutoScalingGroups
                    - autoscaling:DescribeAutoScalingInstances
                  Resource: '*'
          - PolicyName: CostOptimizationAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ce:GetUsageAndCosts
                    - ce:GetCostAndUsage
                    - budgets:ViewBudget
                  Resource: '*'
    
    # Instance Profile
    EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: ai-starter-kit-gpu-instance-profile-enhanced
        Roles:
          - !Ref EC2InstanceRole
    
    # Spot Fleet Role
    SpotFleetRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: spotfleet.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
    
    # Enhanced Launch Template
    LaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: ai-starter-kit-gpu-optimized-enhanced
        LaunchTemplateData:
          ImageId: ami-0c2b8ca1dad447f8a  # NVIDIA GPU-Optimized AMI Ubuntu 24.04
          InstanceType: g4dn.xlarge
          KeyName: !Ref KeyPairName
          IamInstanceProfile:
            Name: !Ref EC2InstanceProfile
          SecurityGroupIds:
            - !Ref GPUSecurityGroup
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              # Set cost optimization parameters
              echo "MAX_SPOT_PRICE=${MaxSpotPrice}" >> /etc/environment
              echo "AUTO_SHUTDOWN_HOURS=${AutoShutdownHours}" >> /etc/environment
              echo "SLACK_WEBHOOK_URL=${SlackWebhookUrl}" >> /etc/environment
              
              # Download and execute the enhanced cloud-init script
              cd /tmp
              wget https://raw.githubusercontent.com/your-repo/001-starter-kit/main/cloud-init-gpu-ubuntu24.sh
              chmod +x cloud-init-gpu-ubuntu24.sh
              ./cloud-init-gpu-ubuntu24.sh
          
          BlockDeviceMappings:
            - DeviceName: /dev/sda1
              Ebs:
                VolumeSize: 100
                VolumeType: gp3
                Iops: 3000
                Throughput: 125
                DeleteOnTermination: true
                Encrypted: true
          
          Monitoring:
            Enabled: true
          
          MetadataOptions:
            HttpEndpoint: enabled
            HttpTokens: required
            HttpPutResponseHopLimit: 2
            InstanceMetadataTags: enabled
          
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Name
                  Value: AI-Starter-Kit-GPU-Enhanced
                - Key: Environment
                  Value: production
                - Key: CostOptimization
                  Value: spot-instances-advanced
                - Key: AutoShutdown
                  Value: enabled
                - Key: MaxSpotPrice
                  Value: !Ref MaxSpotPrice
    
    # Auto Scaling Group with advanced cost optimization
    AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: ai-starter-kit-gpu-asg-enhanced
        MinSize: 1
        MaxSize: 5
        DesiredCapacity: 1
        DefaultCooldown: 300
        HealthCheckType: EC2
        HealthCheckGracePeriod: 900
        VPCZoneIdentifier: !Ref SubnetIds
        MixedInstancesPolicy:
          LaunchTemplate:
            LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: g4dn.xlarge
                WeightedCapacity: 1
              - InstanceType: g4dn.2xlarge
                WeightedCapacity: 2
              - InstanceType: g4ad.xlarge
                WeightedCapacity: 1
          InstancesDistribution:
            OnDemandAllocationStrategy: prioritized
            OnDemandBaseCapacity: 0
            OnDemandPercentageAboveBaseCapacity: 0
            SpotAllocationStrategy: capacity-optimized-prioritized
            SpotInstancePools: 4
            SpotMaxPrice: !Ref MaxSpotPrice
        Tags:
          - Key: Name
            Value: ai-starter-kit-gpu-asg-enhanced
            PropagateAtLaunch: true
          - Key: Environment
            Value: production
            PropagateAtLaunch: true
          - Key: CostOptimization
            Value: spot-instances-advanced
            PropagateAtLaunch: true
    
    # Cost Optimization Lambda Function
    CostOptimizationFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: ai-starter-kit-cost-optimizer
        Runtime: python3.9
        Handler: index.lambda_handler
        Role: !GetAtt CostOptimizationLambdaRole.Arn
        Timeout: 300
        Environment:
          Variables:
            AUTO_SCALING_GROUP_NAME: !Ref AutoScalingGroup
            SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
            MAX_SPOT_PRICE: !Ref MaxSpotPrice
        Code:
          ZipFile: |
            import json
            import boto3
            import urllib3
            import os
            from datetime import datetime, timedelta
            
            def lambda_handler(event, context):
                # Initialize AWS clients
                ec2 = boto3.client('ec2')
                asg = boto3.client('autoscaling')
                cloudwatch = boto3.client('cloudwatch')
                
                # Get environment variables
                asg_name = os.environ['AUTO_SCALING_GROUP_NAME']
                slack_webhook = os.environ.get('SLACK_WEBHOOK_URL', '')
                max_spot_price = float(os.environ.get('MAX_SPOT_PRICE', '0.75'))
                
                try:
                    # Check current spot prices
                    response = ec2.describe_spot_price_history(
                        InstanceTypes=['g4dn.xlarge', 'g4dn.2xlarge', 'g4ad.xlarge'],
                        ProductDescriptions=['Linux/UNIX'],
                        StartTime=datetime.utcnow() - timedelta(hours=1),
                        EndTime=datetime.utcnow()
                    )
                    
                    current_prices = {}
                    for price in response['SpotPriceHistory']:
                        instance_type = price['InstanceType']
                        if instance_type not in current_prices or price['Timestamp'] > current_prices[instance_type]['Timestamp']:
                            current_prices[instance_type] = price
                    
                    # Find cheapest option
                    cheapest_instance = min(current_prices.items(), key=lambda x: float(x[1]['SpotPrice']))
                    cheapest_type = cheapest_instance[0]
                    cheapest_price = float(cheapest_instance[1]['SpotPrice'])
                    
                    # Calculate potential savings
                    on_demand_prices = {
                        'g4dn.xlarge': 1.19,
                        'g4dn.2xlarge': 2.38,
                        'g4ad.xlarge': 1.03
                    }
                    
                    if cheapest_type in on_demand_prices:
                        savings_percent = ((on_demand_prices[cheapest_type] - cheapest_price) / on_demand_prices[cheapest_type]) * 100
                        
                        # Send notification if significant price change or high savings
                        if savings_percent > 75 and slack_webhook:
                            send_slack_notification(
                                slack_webhook,
                                f"🎉 Excellent Spot Savings Available!\n"
                                f"Instance: {cheapest_type}\n"
                                f"Current Price: ${cheapest_price:.3f}/hour\n"
                                f"On-Demand Price: ${on_demand_prices[cheapest_type]:.2f}/hour\n"
                                f"Savings: {savings_percent:.1f}%"
                            )
                    
                    # Check for idle instances and terminate if necessary
                    check_idle_instances(asg_name, cloudwatch)
                    
                    return {
                        'statusCode': 200,
                        'body': json.dumps({
                            'cheapest_instance': cheapest_type,
                            'cheapest_price': cheapest_price,
                            'savings_percent': savings_percent
                        })
                    }
                    
                except Exception as e:
                    print(f"Error in cost optimization: {str(e)}")
                    return {
                        'statusCode': 500,
                        'body': json.dumps({'error': str(e)})
                    }
            
            def send_slack_notification(webhook_url, message):
                http = urllib3.PoolManager()
                msg = {
                    "text": message,
                    "username": "AWS Cost Optimizer",
                    "icon_emoji": ":money_with_wings:"
                }
                encoded_msg = json.dumps(msg).encode('utf-8')
                resp = http.request('POST', webhook_url, body=encoded_msg)
                return resp
            
            def check_idle_instances(asg_name, cloudwatch):
                # Get GPU utilization metrics
                response = cloudwatch.get_metric_statistics(
                    Namespace='GPU/Monitoring',
                    MetricName='GPUUtilization',
                    Dimensions=[
                        {
                            'Name': 'AutoScalingGroupName',
                            'Value': asg_name
                        }
                    ],
                    StartTime=datetime.utcnow() - timedelta(hours=2),
                    EndTime=datetime.utcnow(),
                    Period=3600,
                    Statistics=['Average']
                )
                
                # If GPU utilization is consistently low, consider scaling down
                if response['Datapoints'] and all(dp['Average'] < 10 for dp in response['Datapoints']):
                    print("Low GPU utilization detected, consider scaling down")
    
    # IAM Role for Cost Optimization Lambda
    CostOptimizationLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: CostOptimizationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeSpotPriceHistory
                    - ec2:DescribeInstances
                    - autoscaling:DescribeAutoScalingGroups
                    - autoscaling:SetDesiredCapacity
                    - cloudwatch:GetMetricStatistics
                  Resource: '*'
    
    # EventBridge Rule for scheduled cost optimization
    CostOptimizationSchedule:
      Type: AWS::Events::Rule
      Properties:
        Description: "Trigger cost optimization function every hour"
        ScheduleExpression: "rate(1 hour)"
        State: ENABLED
        Targets:
          - Arn: !GetAtt CostOptimizationFunction.Arn
            Id: "CostOptimizationTarget"
    
    # Permission for EventBridge to invoke Lambda
    CostOptimizationLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref CostOptimizationFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt CostOptimizationSchedule.Arn
    
    # CloudWatch Alarms for cost monitoring
    HighSpotPriceAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alert when spot price is above threshold"
        AlarmName: "ai-starter-kit-high-spot-price"
        ComparisonOperator: GreaterThanThreshold
        EvaluationPeriods: 2
        MetricName: "SpotPrice"
        Namespace: "AWS/EC2Spot"
        Period: 3600
        Statistic: Average
        Threshold: !Ref MaxSpotPrice
        ActionsEnabled: true
        AlarmActions:
          - !Ref CostAlertsTopic
    
    # SNS Topic for cost alerts
    CostAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "ai-starter-kit-cost-alerts"
        DisplayName: "AI Starter Kit Cost Alerts"
    
    # Budget for cost control
    CostBudget:
      Type: AWS::Budgets::Budget
      Properties:
        Budget:
          BudgetName: "ai-starter-kit-gpu-monthly"
          BudgetType: "COST"
          TimeUnit: "MONTHLY"
          BudgetLimit:
            Amount: 200
            Unit: "USD"
          CostFilters:
            TagKey:
              - "Application"
            TagValue:
              - "ai-starter-kit"
        NotificationsWithSubscribers:
          - Notification:
              NotificationType: "ACTUAL"
              ComparisonOperator: "GREATER_THAN"
              Threshold: 80
            Subscribers:
              - SubscriptionType: "SNS"
                Address: !Ref CostAlertsTopic
  
  Outputs:
    LaunchTemplateId:
      Description: "Enhanced Launch Template ID"
      Value: !Ref LaunchTemplate
      Export:
        Name: !Sub "${AWS::StackName}-LaunchTemplateId"
    
    AutoScalingGroupName:
      Description: "Auto Scaling Group Name"
      Value: !Ref AutoScalingGroup
      Export:
        Name: !Sub "${AWS::StackName}-AutoScalingGroupName"
    
    SecurityGroupId:
      Description: "Security Group ID"
      Value: !Ref GPUSecurityGroup
      Export:
        Name: !Sub "${AWS::StackName}-SecurityGroupId"
    
    CostOptimizationFunction:
      Description: "Cost Optimization Lambda Function ARN"
      Value: !GetAtt CostOptimizationFunction.Arn
    
    EstimatedMonthlySavings:
      Description: "Estimated monthly savings with 70% spot discount"
      Value: "~$600-800/month compared to on-demand pricing"

# =============================================================================
# COST OPTIMIZATION STRATEGIES AND BEST PRACTICES
# =============================================================================
CostOptimizationStrategies:
  SpotInstanceBestPractices:
    - "Use diversified instance types (g4dn.xlarge, g4dn.2xlarge, g4ad.xlarge)"
    - "Spread across multiple Availability Zones for better availability"
    - "Set maximum price 10-20% below current on-demand pricing"
    - "Implement graceful shutdown procedures for spot interruptions"
    - "Use capacity-optimized-prioritized allocation strategy"
    - "Monitor spot price trends and adjust bidding strategy"
  
  SchedulingOptimization:
    - "Schedule workloads during off-peak hours (typically weekends)"
    - "Use auto-shutdown for idle instances after specified hours"
    - "Implement intelligent scaling based on workload patterns"
    - "Pre-warm instances during predicted high-demand periods"
  
  ResourceOptimization:
    - "Use gp3 storage instead of gp2 for better cost/performance ratio"
    - "Implement EFS Intelligent Tiering for storage cost optimization"
    - "Right-size instances based on actual GPU utilization metrics"
    - "Use CloudWatch metrics to identify underutilized resources"
  
  MonitoringAndAlerting:
    - "Set up budget alerts at 50%, 80%, and 100% thresholds"
    - "Monitor spot interruption rates and adjust strategy accordingly"
    - "Track GPU utilization to optimize instance sizing"
    - "Implement cost allocation tags for detailed cost tracking"

# =============================================================================
# DEPLOYMENT AUTOMATION SCRIPTS
# =============================================================================
DeploymentScripts:
  deploy_spot_infrastructure:
    description: "Deploy complete spot instance infrastructure"
    command: |
      #!/bin/bash
      
      # Deploy CloudFormation stack
      aws cloudformation create-stack \
        --stack-name ai-starter-kit-spot-optimized \
        --template-body file://aws-spot-instance-config.yaml \
        --parameters \
          ParameterKey=KeyPairName,ParameterValue=YOUR_KEY_PAIR \
          ParameterKey=VpcId,ParameterValue=vpc-xxxxxxxx \
          ParameterKey=SubnetIds,ParameterValue="subnet-xxxxxxxx,subnet-yyyyyyyy,subnet-zzzzzzzz" \
          ParameterKey=EFSFileSystemId,ParameterValue=fs-xxxxxxxx \
          ParameterKey=MaxSpotPrice,ParameterValue=0.75 \
          ParameterKey=SlackWebhookUrl,ParameterValue=https://hooks.slack.com/... \
        --capabilities CAPABILITY_NAMED_IAM
      
      # Wait for stack completion
      aws cloudformation wait stack-create-complete \
        --stack-name ai-starter-kit-spot-optimized
      
      echo "Spot instance infrastructure deployed successfully!"
  
  monitor_costs:
    description: "Monitor and report current costs"
    command: |
      #!/bin/bash
      
      # Get current month costs
      aws ce get-cost-and-usage \
        --time-period Start=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d),End=$(date +%Y-%m-%d) \
        --granularity MONTHLY \
        --metrics BlendedCost \
        --group-by Type=DIMENSION,Key=SERVICE \
        --filter file://cost-filter.json
  
  optimize_costs:
    description: "Run cost optimization analysis"
    command: |
      #!/bin/bash
      
      # Invoke cost optimization Lambda
      aws lambda invoke \
        --function-name ai-starter-kit-cost-optimizer \
        --payload '{}' \
        /tmp/cost-optimization-result.json
      
      # Display results
      cat /tmp/cost-optimization-result.json | jq '.'

# =============================================================================
# MONITORING AND ALERTING CONFIGURATION
# =============================================================================
MonitoringConfig:
  CloudWatchDashboard:
    name: "AI-Starter-Kit-Cost-Optimization"
    widgets:
      - type: "metric"
        properties:
          metrics:
            - ["AWS/EC2Spot", "SpotPrice", "InstanceType", "g4dn.xlarge"]
            - ["AWS/EC2Spot", "SpotPrice", "InstanceType", "g4dn.2xlarge"]
            - ["AWS/EC2Spot", "SpotPrice", "InstanceType", "g4ad.xlarge"]
          period: 3600
          stat: "Average"
          region: "us-east-1"
          title: "Current Spot Prices"
      
      - type: "metric"
        properties:
          metrics:
            - ["GPU/Monitoring", "GPUUtilization"]
            - ["GPU/Monitoring", "GPUMemoryUtilization"]
          period: 300
          stat: "Average"
          region: "us-east-1"
          title: "GPU Utilization"
      
      - type: "log"
        properties:
          query: |
            SOURCE '/aws/ec2/gpu-deployment'
            | fields @timestamp, @message
            | filter @message like /cost/
            | sort @timestamp desc
            | limit 20
          region: "us-east-1"
          title: "Cost-Related Logs"
  
  CostAlerts:
    - name: "Daily spend exceeds $20"
      threshold: 20
      period: "daily"
      action: "send_slack_notification"
    
    - name: "Weekly spend exceeds $100"
      threshold: 100
      period: "weekly"
      action: "send_email_alert"
    
    - name: "Monthly spend exceeds $300"
      threshold: 300
      period: "monthly"
      action: "stop_all_instances"

# =============================================================================
# TROUBLESHOOTING AND OPTIMIZATION TIPS
# =============================================================================
TroubleshootingGuide:
  common_issues:
    - issue: "Spot instances frequently interrupted"
      solution: "Increase diversification across instance types and AZs"
      command: "aws ec2 describe-spot-price-history --instance-types g4dn.xlarge g4dn.2xlarge"
    
    - issue: "High costs despite spot instances"
      solution: "Check for on-demand instances in ASG or review pricing strategy"
      command: "aws ec2 describe-instances --filters Name=instance-lifecycle,Values=spot"
    
    - issue: "Poor GPU utilization"
      solution: "Review workload scheduling and consider smaller instance types"
      command: "aws cloudwatch get-metric-statistics --namespace GPU/Monitoring --metric-name GPUUtilization"
  
  optimization_tips:
    - "Monitor spot interruption patterns and adjust launch templates accordingly"
    - "Use reserved instances for baseline capacity if workload is predictable"
    - "Implement automated cost reporting and alerting"
    - "Regularly review and optimize Docker container resource allocations"
    - "Consider using Savings Plans for consistent GPU workloads"
    - "Implement intelligent workload scheduling based on spot price patterns"

# =============================================================================
# ESTIMATED COST SAVINGS
# =============================================================================
CostSavingsAnalysis:
  baseline_costs:
    on_demand_g4dn_xlarge: "$1.19/hour = $857/month (24/7)"
    on_demand_g4dn_2xlarge: "$2.38/hour = $1,714/month (24/7)"
  
  optimized_costs:
    spot_g4dn_xlarge: "$0.35/hour = $252/month (70% savings)"
    spot_g4dn_2xlarge: "$0.70/hour = $504/month (70% savings)"
  
  additional_optimizations:
    scheduling: "Additional 30-50% savings with intelligent scheduling"
    right_sizing: "10-20% savings with proper instance sizing"
    storage: "15-25% savings with gp3 and EFS intelligent tiering"
  
  total_estimated_savings:
    monthly: "$605-855 savings per month"
    annual: "$7,260-10,260 savings per year"
    percentage: "70-85% total cost reduction" 